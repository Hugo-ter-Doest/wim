<?php
/**
 * @file
 * Code for the WIM Block Management feature.
 */

include_once 'wim_block_management.features.inc';
include_once 'wim_block_management.functions.inc';

define('WIM_BLOCK_MANAGEMENT_BOOTSTRAP_FULL_WIDTH', 12);

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function wim_block_management_form_felix_attributes_form_alter(&$form, &$form_state) {
  // Inform Felix about our configs.
  $form['#felix_block_config'] = TRUE;

  $felix_block = $form['#felix_block'];
  $config = isset($felix_block->data['config']) ? $felix_block->data['config'] : array();

  $form['bootstrap_layout'] = array(
    '#title' => t('Bootstrap layout'),
    '#type' => 'select',
    '#options' => _wim_block_management_get_columns_options(),
    '#default_value' => isset($config['bootstrap_layout']) ? $config['bootstrap_layout'] : 12,
  );
  $form['new_row'] = array(
    '#title' => t('New row'),
    '#type' => 'checkbox',
    '#default_value' => isset($config['new_row']) ? $config['new_row'] : FALSE,
    '#description' => t('Check this to show block in a new row, otherwise it will respect other blocks in region and try to move them in the same row based on bootstrap layout selected above.'),
  );

  if ($felix_block->module === 'bean') {
    $bean_info = entity_get_info('bean');
    $view_modes = array();
    foreach ($bean_info['view modes'] as $mode_key => $mode) {
      $view_modes[$mode_key] = $mode['label'];
    }
    $form['bean_view_mode'] = array(
      '#title' => t('View mode'),
      '#type' => 'select',
      '#options' => $view_modes,
      '#default_value' => isset($config['bean_view_mode']) ? $config['bean_view_mode'] : 'default',
      '#description' => t('Select view mode for this block.'),
    );
  }

}

/**
 * Implements hook_block_config_save().
 */
function wim_block_management_felix_block_config_save($block, $values) {
  $configs = array();
  $felix_custom_configs = array(
    'bootstrap_layout',
    'new_row',
    'bean_view_mode',
  );

  foreach ($felix_custom_configs as $config) {
    if (isset($values[$config])) {
      $configs[$config] = $values[$config];
    }
  }

  return $configs;
}

/**
 * Implements hook_entity_info_alter().
 */
function wim_block_management_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['felix'] = array(
    'label' => t('Felix'),
    'custom settings' => FALSE,
  );
  $entity_info['bean']['view modes']['link_title'] = array(
    'label' => t('Title with link'),
    'custom settings' => TRUE,
  );
}
