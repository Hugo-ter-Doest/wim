<?php

/**
 * @file
 * Install, update and uninstall functions for the WIM distribution.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function wim_install() {
  // Set admin and default themes.
  _wim_set_up_theme();
  // Set roles and permissions.
  _wim_set_up_roles_and_permissions();
  // Set date formats.
  _wim_set_date_formats();
  // Set text formats.
  _wim_set_text_formats();
  // Set blocks.
  _wim_set_blocks();
  // Add menu items.
  _wim_import_menu_items();
  // Install Dutch language.
  _wim_install_language();

  // Add 404 page.
  $page_404_nid = _wim_create_page('404');
  variable_set('site_404', 'node/' . $page_404_nid);

  // Add 403 page.
  $page_403_nid = _wim_create_page('403');
  variable_set('site_403', 'node/' . $page_403_nid);
}

/**
 * Set the default theme.
 */
function _wim_set_up_theme() {
  $admin_theme = 'seven';
  $default_theme = 'wim';

  theme_enable(array($default_theme, $admin_theme));
  variable_set('theme_default', $default_theme);
  variable_set('admin_theme', $admin_theme);
  variable_set('node_admin_theme', '1');
}

/**
 * Creates user roles and assign them permissions.
 */
function _wim_set_up_roles_and_permissions() {
  // Base role weight: 0 and 1 is occupied by built-in roles.
  $weight = 2;

  // Create a default role for site administrators,
  // with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = st('administrator');
  $admin_role->weight = $weight++;
  user_role_save($admin_role);

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a role for Content Moderator.
  $cm_role = new stdClass();
  $cm_role->name = st('content moderator');
  $cm_role->weight = $weight++;
  user_role_save($cm_role);

  // Permissions.
  // Authenticated role.
  $authenticated_permissions = array(
    'access content',
    'view any editorial bean',
  );
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, $authenticated_permissions);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, $authenticated_permissions);

  // Administrator role.
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Content Moderator role.
  $cm_permissions = array(
    'access administration menu',
    'access administration pages',
    'access user profiles',
    'administer taxonomy',
    'access content overview',
    'administer blocks',
    'administer menu',
    'manage felix blocks',
    'access contextual links',
    'administer custom lists',
    'manipulate queues',
    // Node access.
    'administer nodes',
    'create news content',
    'create page content',
    'create product content',
    'create faq content',
    'create agenda content',
    'create subject_page content',
    'delete any news content',
    'delete any page content',
    'delete any product content',
    'delete any faq content',
    'delete any agenda content',
    'delete any subject_page content',
    'delete own news content',
    'delete own page content',
    'delete own product content',
    'delete own faq content',
    'delete own agenda content',
    'delete own subject_page content',
    'edit any news content',
    'edit any page content',
    'edit any product content',
    'edit any faq content',
    'edit any agenda content',
    'edit any subject_page content',
    'edit own news content',
    'edit own page content',
    'edit own product content',
    'edit own faq content',
    'edit own agenda content',
    'edit own subject_page content',
    'use text format filtered_html',
    'use text format full_html',
    'bypass node access',
    // Bean.
    'view bean page',
    'access bean overview',
    'administer beans',
    'edit bean view mode',
  );

  // Access to the taxonomy vocabularies.
  foreach (taxonomy_get_vocabularies() as $vocabulary) {
    $cm_permissions[] = "delete terms in $vocabulary->vid";
    $cm_permissions[] = "edit terms in $vocabulary->vid";
  }

  user_role_grant_permissions($cm_role->rid, $cm_permissions);
}

/**
 * Set date formats.
 */
function _wim_set_date_formats() {
  $types = array(
    'single_day' => array(
      'title' => 'Single day',
      'locked' => 0,
      'is_new' => 1,
      'type' => 'single_day',
      'date_format' => 'd M',
    ),
  );
  $date_formats = array(
    'long' => array(
      'format' => 'd F Y - H:i',
      'type' => 'long',
      'locked' => 0,
      'is_new' => 1,
    ),
    'medium' => array(
      'format' => 'd F Y',
      'type' => 'medium',
      'locked' => 0,
      'is_new' => 1,
    ),
    'short' => array(
      'format' => 'd-m-Y',
      'type' => 'short',
      'locked' => 0,
      'is_new' => 1,
    ),
    'single_day' => array(
      'format' => 'd M',
      'type' => 'single_day',
      'locked' => 0,
      'is_new' => 1,
    ),
  );

  // Create new format types.
  foreach ($types as $format_type) {
    system_date_format_type_save($format_type);
    variable_set('date_format_' . $format_type['type'], $format_type['date_format']);
  }

  // Update date types with new date formats.
  foreach ($date_formats as $date_format) {
    system_date_format_save($date_format);
    variable_set('date_format_' . $date_format['type'], $date_format['format']);
  }
}

/**
 * Set text formats.
 */
function _wim_set_text_formats() {
  $formats = array();
  // Exported format: Filtered HTML.
  $formats['filtered_html'] = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'cache' => 1,
    'status' => 1,
    'weight' => -9,
    'filters' => array(
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 72,
        ),
      ),
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <table> <tr> <th> <td> <thead> <tbody> <tfoot> <caption> <h2> <h3> <h4> <h5> <h6> <p> <br> <b> <i> <u> <abbr> <acronym> <object> <embed> <param> <span> <iframe> <area> <map> <img>',
          'filter_html_help' => 1,
          'filter_html_nofollow' => 0,
        ),
      ),
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
        'settings' => array(),
      ),
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
        'settings' => array(),
      ),
      'inlinetabs' => array(
        'weight' => 50,
        'status' => 1,
        'settings' => array(),
      ),
      'pathologic' => array(
        'weight' => 50,
        'status' => 1,
        'settings' => array(
          'local_paths' => '',
          'protocol_style' => 'full',
        ),
      ),
    ),
  );
  // Exported format: Full HTML.
  $formats['full_html'] = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'cache' => 1,
    'status' => 1,
    'weight' => -10,
    'filters' => array(
      'filter_url' => array(
        'weight' => -47,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 72,
        ),
      ),
      'filter_autop' => array(
        'weight' => -42,
        'status' => 1,
        'settings' => array(),
      ),
      'media_filter' => array(
        'weight' => -41,
        'status' => 1,
        'settings' => array(),
      ),
      'filter_htmlcorrector' => array(
        'weight' => -40,
        'status' => 1,
        'settings' => array(),
      ),
      'pathologic' => array(
        'weight' => -39,
        'status' => 1,
        'settings' => array(
          'local_paths' => '',
          'protocol_style' => 'full',
        ),
      ),
      'filter_wiki_links' => array(
        'weight' => -38,
        'status' => 1,
        'settings' => array(),
      ),
      'inlinetabs' => array(
        'weight' => 50,
        'status' => 1,
        'settings' => array(),
      ),
    ),
  );
  // Exported format: Plain text.
  $formats['plain_text'] = array(
    'format' => 'plain_text',
    'name' => 'Plain text',
    'cache' => 1,
    'status' => 1,
    'weight' => -8,
    'filters' => array(
      'filter_html_escape' => array(
        'weight' => 0,
        'status' => 1,
        'settings' => array(),
      ),
      'filter_url' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'filter_url_length' => 72,
        ),
      ),
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
        'settings' => array(),
      ),
    ),
  );
}

/**
 * Set blocks.
 */
function _wim_set_blocks() {
  $default_theme = variable_get('theme_default', 'wim');
  $blocks = array(
    // Views blocks.
    array(
      'module' => 'views',
      'delta' => 'agenda-upcoming_agenda',
      'theme' => $default_theme,
      'status' => BLOCK_CUSTOM_ENABLED,
      'weight' => 0,
      'region' => 'sidebar_first',
      'pages' => "agenda\nnews",
      'visibility' => 1,
      'title' => '',
      'cache' => DRUPAL_NO_CACHE,
    ),
    array(
      'module' => 'views',
      'delta' => 'news-latest_news',
      'theme' => $default_theme,
      'status' => BLOCK_CUSTOM_ENABLED,
      'weight' => 0,
      'region' => 'sidebar_second',
      'pages' => "agenda\nnews",
      'visibility' => 1,
      'title' => '',
      'cache' => DRUPAL_NO_CACHE,
    ),
    // Menus.
    array(
      'module' => 'menu',
      'delta' => 'menu-meta-menu',
      'theme' => $default_theme,
      'status' => BLOCK_CUSTOM_ENABLED,
      'weight' => 0,
      'region' => 'meta_left',
      'pages' => '',
      'visibility' => 0,
      'title' => '<none>',
      'cache' => DRUPAL_NO_CACHE,
    ),
    array(
      'module' => 'menu',
      'delta' => 'menu-top-tasks',
      'theme' => $default_theme,
      'status' => BLOCK_CUSTOM_ENABLED,
      'weight' => -1,
      'region' => 'content',
      'pages' => '<front>',
      'visibility' => 1,
      'title' => '<none>',
      'cache' => DRUPAL_NO_CACHE,
    ),
  );

  $query = db_insert('block')->fields(array(
    'module',
    'delta',
    'theme',
    'status',
    'weight',
    'region',
    'pages',
    'visibility',
    'title',
    'cache',
  ));

  foreach ($blocks as $block) {
    $query->values($block);
  }
  $query->execute();

}

/**
 * Import menu items.
 */
function _wim_import_menu_items() {
  // List of menus with items.
  $menus = array(
    // Meta menu links.
    'menu-meta-menu' => array(
      array(
        'link_title' => st('Home'),
        'link_path' => '<front>',
        'menu_name' => 'menu-meta-menu',
        'weight' => 0,
        'expanded' => 0,
      ),
      array(
        'link_title' => st('FAQ'),
        'link_path' => 'faq',
        'menu_name' => 'menu-meta-menu',
        'weight' => 1,
        'expanded' => 0,
        'customized' => 1,
      ),
    ),
    'main-menu' => array(
      array(
        'link_title' => st('Home'),
        'link_path' => '<front>',
        'menu_name' => 'main-menu',
        'weight' => 0,
        'expanded' => 0,
      ),
      array(
        'link_title' => st('Actual'),
        'link_path' => 'news',
        'menu_name' => 'main-menu',
        'weight' => 1,
        'expanded' => 1,
        'customized' => 1,
        'children' => array(
          array(
            'link_title' => st('News'),
            'link_path' => 'news',
            'menu_name' => 'main-menu',
            'weight' => 1,
            'expanded' => 0,
            'depth' => 2,
            'customized' => 1,
          ),
          array(
            'link_title' => st('Agenda'),
            'link_path' => 'agenda',
            'menu_name' => 'main-menu',
            'weight' => 1,
            'expanded' => 0,
            'depth' => 2,
            'customized' => 1,
          ),
        ),
      ),
    ),
  );

  foreach ($menus as $menu_name => $items) {
    foreach ($items as $item) {
      $plid = menu_link_save($item);

      // If item has children add them.
      if (isset($item['children']) && $plid) {
        foreach ($item['children'] as $child_item) {
          $child_item['plid'] = $plid;
          menu_link_save($child_item);
        }
      }
    }
  }
}

/**
 * Create a node entity.
 *
 * @param string $page_type
 *    Page type, could by like 404, 403 etc.
 *
 * @return int node id
 *    Created node id.
 */
function _wim_create_page($page_type, $bundle = 'page', $language = LANGUAGE_NONE) {
  $node = new stdClass();
  $node->type = $bundle;
  $node->language = $language;
  node_object_prepare($node);

  // 403 page.
  if ($page_type === '404') {
    $node->title = 'Not Found (404)';
    $node->body[$language][0]['value'] = 'Page not found.';
  }

  // 403 page.
  if ($page_type === '403') {
    $node->title = 'No access (403)';
    $node->body[$language][0]['value'] = 'No access.';
  }

  $node = node_submit($node);
  node_save($node);

  return isset($node->nid) ? $node->nid : '';
}

/**
 * Enables Dutch language and language negotiation based on URL.
 */
function _wim_install_language() {
  include_once DRUPAL_ROOT . '/includes/language.inc';
  // Add Dutch language.
  locale_add_language('nl');
}
